---
title: "Spectrum cancer_transcriptional_programs"
author: "Mobina Kazemi"
date: "`r Sys.Date()`"
format: 
  html:
    code-fold: true
    code-tools: true
    code-link: true
    toc: true
execute:
  cache: false
---

```{r setup}
#| output: false
library(zellkonverter)
library(Seurat)
library(cowplot)
library(tidyverse)
library(reticulate)
library(ggthemes)
library(dittoSeq)
library(patchwork)
library(anndata)
library(Matrix)
library(glue)
library(ggplotify)
library(ggh4x)
library(here)
library(leidenbase)
library(ggpubr)
library(SeuratDisk)
library(stringr)
library(GSA)
#library(bsub)
```

```{r}
## libraries and functions required

stringsAsFactors=FALSE


##################################### STRUCTURE of JASMINE ####################
### Function1:-  Calculating Mean Ranks for signature genes across each cell

RankCalculation <- function(x,genes){
			
            subdata = x[x!=0]                                                                      ### Removing Dropouts from single cell
			DataRanksUpdated=rank(subdata)                                                         ### Calculating ranks of each signature gene per cell
			DataRanksSigGenes = DataRanksUpdated[which(names(DataRanksUpdated) %in% genes)]        ### Shortling rank vector for signature genes 
			CumSum = ifelse(length(DataRanksSigGenes),mean(DataRanksSigGenes,na.rm = TRUE),0 )     ### Calculating Mean of ranks for signature genes
 			FinalRawRank = CumSum/length(subdata)                                                  ### Normalizing Means by total coverage
			return(FinalRawRank)                                                
			}			

#### Function2:- Calculating enrichment of signature genes across each cell 	(using odds ratio)

ORCalculation <- function(data,genes){
			GE = data[which(rownames(data) %in% genes),]                                          ### Subsetting data for signature genes
 			NGE = data[-which(rownames(data) %in% genes),]                                        ### Subsetting data for non-signature genes
			SigGenesExp = apply(GE,2,function(x) length(x[x!=0]))                                 ### Calculating Number of expressed Signature Genes per cell
			NSigGenesExp = apply(NGE,2,function(x) length(x[x!=0]))                               ### Calculating Number of expressed Non-Signature Genes per cell
			SigGenesNE = nrow(GE) - SigGenesExp                                                   ### Calculating Number of Not expressed Signature Genes per cell
			SigGenesNE = replace(SigGenesNE,SigGenesNE==0,1)									  ### Replacing Zero's with 1
			NSigGenesExp = replace(NSigGenesExp,NSigGenesExp==0,1)                                ### Replacing Zero's with 1
		    NSigGenesNE = nrow(data) - (NSigGenesExp + SigGenesExp)                               ### Calculating Number of Not expressed Non-Signature Genes per cell
			NSigGenesNE = NSigGenesNE - SigGenesNE
			OR = (SigGenesExp * NSigGenesNE) / (SigGenesNE * NSigGenesExp)                         ### Calculating Enrichment (Odds Ratio)
            return(OR)
			}
			
#### Function3:- Calculating enrichment of signature genes across each cell (using Likelihood ratio)

LikelihoodCalculation <- function(data,genes){
			GE = data[which(rownames(data) %in% genes),]
			NGE = data[-which(rownames(data) %in% genes),]
			SigGenesExp = apply(GE,2,function(x) length(x[x!=0]))
			NSigGenesExp = apply(NGE,2,function(x) length(x[x!=0]))
			SigGenesNE = nrow(GE) - SigGenesExp
			SigGenesNE = replace(SigGenesNE,SigGenesNE==0,1)			
			NSigGenesExp = replace(NSigGenesExp,NSigGenesExp==0,1)
		    NSigGenesNE = nrow(data) - (NSigGenesExp + SigGenesExp)
			NSigGenesNE = NSigGenesNE - SigGenesNE
			LR1 = SigGenesExp*(NSigGenesExp + NSigGenesNE)
			LR2 = NSigGenesExp * (SigGenesExp + SigGenesNE)
			LR = LR1/LR2
            return(LR)
			}	

###  Function 4:- Scalar [0,1] Normalization of Means and Enrichment across set of cells

NormalizationJAS <- function(JAS_Scores)
            {
				JAS_Scores = (JAS_Scores - min(JAS_Scores))/(max(JAS_Scores)- min(JAS_Scores))
				return(JAS_Scores)
			}


### Function 5:- Signature Scoring via JASMINE mergining Means and Enrichment
			
JASMINE <- function(data,genes,method)
		{
  		    idx = match(genes,rownames(data))                                                 
	        idx = idx[!is.na(idx)]
			if(length(idx)> 1){
			RM = apply(data,2,function(x) RankCalculation(x,genes))                              ### Mean RankCalculation for single cell data matrix
			RM = NormalizationJAS(RM)                                                            ### Normalizing Mean Ranks
			
			if(method == "oddsratio"){
			OR = ORCalculation(data,genes)			                                             ### Signature Enrichment Calculation for single cell data matrix (OR)
			OR = NormalizationJAS(OR)															 ### Normalizing Enrichment Scores (OR)
			JAS_Scores = (RM + OR)/2
			}else if(method == "likelihood"){
			
			LR = LikelihoodCalculation(data,genes)			                                     ### Signature Enrichment Calculation for single cell data matrix  (LR)
			LR = NormalizationJAS(LR)															 ### Normalizing Enrichment Scores (LR)
			JAS_Scores = (RM + LR)/2
            }
			FinalScores = data.frame(names(RM),JAS_Scores)                                       ### JASMINE scores
			colnames(FinalScores)[1]='SampleID'
			return(FinalScores)
			}
		}

```


```{r}
SCE<-readRDS("/work/shah/users/Mobina/Projects/SPECTRUM_NACT/Spectrum_Full/Ovarian.cancer.super_processed_filtered_annotated.rds")
SCE<-SCE[,which(SCE@meta.data$doublet=="False")]
data2<-SCE@meta.data
data<-SCE$RNA@counts
```


```{r}
meta_programs<-read.delim("/work/shah/users/Mobina/Projects/SPECTRUM_NACT/data/cancer_metaprograms.csv",sep = ",")
```

```{python}
import pandas
    
  
meta_program_dict = {}
for m in r.meta_programs.columns:
    for j in range(49):
      meta_program_dict.setdefault(m, []).append(r.meta_programs[m].values[j])     
```


```{r}
meta_program_dict_r=py$meta_program_dict
#Input Data:- 
####                 1. A single cell RNAseq data matrix, where rows correspond to gene symbols and columns correspond to cells
####                 2. A vector of marker genes(symbols) reflecting a biological process for scoring
## data = Input data
### genes = List of gene symbols for which scores have to be calculated
### method = Enter the method for computing the enrichment. Method could be either 'oddsratio' or 'likelihood'
for(i in names(meta_program_dict_r)){
genes<- meta_program_dict_r[[i]]
#'oddsratio',
Result  =  JASMINE(data,genes,method =c('likelihood')) ## calling JASMINE 
colnames(Result)[2]<-i
colnames(Result)[1]<-"cell_id"
data2<-merge(data2,Result,by = "cell_id")

}
 write.table(data2,file = "/work/shah/users/Mobina/Projects/SPECTRUM_NACT/Spectrum_Full/meta_pathway_scores_Scanpy.txt")
# 
 data2=read.delim("/work/shah/users/Mobina/Projects/SPECTRUM_NACT/Spectrum_Full/meta_pathway_scores.txt",sep="")


Data<-data2[,1:110]
Data$meta_program<-colnames(Data)[110]
colnames(Data)[110]<-"Score"


for(i in 111:150){
 a<-data2[,c(1:109,i)]
 a$meta_program<-colnames(a)[110]
 colnames(a)[110]<-"Score"
 Data<-rbind(Data,a)

}

Data$site<-0

c("OMENTUM","QUADRANT","PERITONEUM","ASCITES","OVARY","DIAPHRAGM","STOMACH","BOWEL","ADNEXA","CECUM","TUBE","TUMOUR","PELVIS","SURFACE","LYMPH_NODE","LYMPH_NODE_WITH_COLONIC_MESENTARY","ANTERIOR_ABDOMINAL_WALL","PARACOLIC_GUTTER","BLADDER")

Data$site[grep("BOWEL",Data$sample)]<-"BOWEL"
Data$site[grep("ADNEXA",Data$sample)]<-"ADNEXA"
Data$site[grep("OMENTUM",Data$sample)]<-"OMENTUM"
Data$site[grep("QUADRANT",Data$sample)]<-"QUADRANT"
Data$site[grep("PERITONEUM",Data$sample)]<-"PERITONEUM"
Data$site[grep("ASCITES",Data$sample)]<-"ASCITES"
Data$site[grep("OVARY",Data$sample)]<-"OVARY"
Data$site[grep("DIAPHRAGM",Data$sample)]<-"DIAPHRAGM"
Data$site[grep("STOMACH",Data$sample)]<-"STOMACH"
Data$site[grep("CECUM",Data$sample)]<-"CECUM"
Data$site[grep("TUBE",Data$sample)]<-"TUBE"
Data$site[grep("TUMOUR",Data$sample)]<-"TUMOUR"
Data$site[grep("PELVIS",Data$sample)]<-"PELVIS"
Data$site[grep("SURFACE",Data$sample)]<-"SURFACE"
Data$site[grep("LYMPH_NODE",Data$sample)]<-"LYMPH_NODE"
Data$site[grep("LYMPH_NODE_WITH_COLONIC_MESENTARY",Data$sample)]<-"LYMPH_NODE_WITH_COLONIC_MESENTARY"
Data$site[grep("ANTERIOR_ABDOMINAL_WALL",Data$sample)]<-"ANTERIOR_ABDOMINAL_WALL"
Data$site[grep("PARACOLIC_GUTTER",Data$sample)]<-"PARACOLIC_GUTTER"
Data$site[grep("BLADDER",Data$sample)]<-"BLADDER"


Data2<-Data[which(Data$site %in% c("BOWEL","ADNEXA")),]

#library(gg.layers)
library(ggplot2)
#facet_wrap( ~ meta_program, scales="free")+ geom_boxplot2(width = 0.8, width.errorbar = 0.5)
#geom_point(aes(y=Score, group=site), position = position_dodge(width=0.75))
pdf("/work/shah/users/Mobina/Projects/SPECTRUM_NACT/data/meta_program_score_Adnexa_Bowel.pdf",width = 20,height = 5)
p0=ggplot(Data2, aes(x = meta_program, y = Score)) +  # ggplot function
  geom_boxplot(aes(fill=site),outlier.shape = NA,position = position_dodge(width = 0.8),width=0.6)+theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
        axis.title.x = element_blank(),
        strip.placement = "outside",
        strip.text.x = element_text(angle=0))

# scale y limits based on ylim1

p1 = p0 + scale_y_continuous(limits = quantile(Data2$Score, c(0.1, 0.9)))+coord_cartesian(ylim = quantile(Data2$Score, c(0.1, 0.9)))
p1
dev.off()

write.table(Data,"/work/shah/users/Mobina/Projects/SPECTRUM_NACT/Spectrum_Full/meta_pathway_scores.txt",sep="\t")







# Box plot: comparison against reference

stat.test <-compare_means(
  Score ~ site, data = Data2, group.by = "meta_program",
  method = "t.test", ref.group = "ADNEXA"
)

p1=p1 + stat_pvalue_manual(
  stat.test, x = "meta_program", y.position = 3.596510999,
  label = "p.signif",size = 3.5,color = "red",tip.length = 10,
  bracket.shorten = 10,hide.ns = TRUE)
p1
# Box plots

pdf("/work/shah/users/Mobina/Projects/SPECTRUM_NACT/Spectrum_Full/meta_program_score_Adnexa_Bowel_with_statistics.pdf",width = 20,height = 10)
p1 
dev.off()

```
```{r}
Data2<-Data[which(Data$site %in% c("OMENTUM","ADNEXA")),]

#library(gg.layers)
library(ggplot2)
#facet_wrap( ~ meta_program, scales="free")+ geom_boxplot2(width = 0.8, width.errorbar = 0.5)
#geom_point(aes(y=Score, group=site), position = position_dodge(width=0.75))

p0=ggplot(Data2, aes(x = meta_program, y = Score)) +  # ggplot function
  geom_boxplot(aes(fill=site),outlier.shape = NA,position = position_dodge(width = 0.8),width=0.6)+theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
        axis.title.x = element_blank(),
        strip.placement = "outside",
        strip.text.x = element_text(angle=0))

# scale y limits based on ylim1

p1 = p0 + scale_y_continuous(limits = quantile(Data2$Score, c(0.1, 0.9)))+coord_cartesian(ylim = quantile(Data2$Score, c(0.1, 0.9)))




# Box plot: comparison against reference

stat.test <-compare_means(
  Score ~ site, data = Data2, group.by = "meta_program",
  method = "t.test", ref.group = "ADNEXA"
)

p1=p1 + stat_pvalue_manual(
  stat.test, x = "meta_program", y.position = 3.7,
  label = "p.signif",size = 3.5,color = "red",tip.length = 10,
  bracket.shorten = 10,hide.ns = TRUE)
p1
# Box plots

pdf("/work/shah/users/Mobina/Projects/SPECTRUM_NACT/Spectrum_Full/meta_program_score_Adnexa_OMENTUM_with_statistics.pdf",width = 20,height = 10)
p1 
dev.off()
```



```{r}
Data2<-Data[which(Data$site %in% c("BOWEL","ADNEXA")),]


pdf("/work/shah/users/Mobina/Projects/SPECTRUM_NACT/Spectrum_Full/meta_program_score_Adnexa_BOWEL_patients.pdf",width = 20,height = 10)
for(i in 1:length(unique((Data2$patient)))){
patient=as.character((unique((Data2$patient)))[i])
a<-Data2[which(Data2$patient==patient),]

p0=ggplot(a, aes(x = meta_program, y = Score)) +  # ggplot function
  geom_boxplot(aes(fill=site),outlier.shape = NA)+theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
        axis.title.x = element_blank(),
        strip.placement = "outside",
        strip.text.x = element_text(angle=0))
p1 = p0 + scale_y_continuous(limits = quantile(a$Score, c(0.1, 0.9)))+coord_cartesian(ylim = quantile(a$Score, c(0.1, 0.9)))

if(length(table(a$site))==2){
stat.test <-compare_means(
  Score ~ site, data = a, group.by = "meta_program",
  method = "t.test", ref.group = "ADNEXA")

p1=p1 + stat_pvalue_manual(
  stat.test, x = "meta_program", y.position = as.numeric(quantile(a$Score, c(0.1, 0.9))[2]),
  label = "p.signif",size = 3.5,color = "red",tip.length = 10,
  bracket.shorten = 10,hide.ns = TRUE)+ggtitle(paste0("Patient: ",patient))
print(p1)
}
else{
  p1=p1+ggtitle(paste0("Patient: ",patient))
  print(p1)
}

}

dev.off()
```

```{r}
Data2<-Data[which(Data$site %in% c("OMENTUM","ADNEXA")),]
vec=c()

pdf("/work/shah/users/Mobina/Projects/SPECTRUM_NACT/Spectrum_Full/meta_program_score_Adnexa_OMENTUM_patients.pdf",width = 20,height = 10)
for(i in 1:length(unique((Data2$patient)))){
patient=as.character((unique((Data2$patient)))[i])
a<-Data2[which(Data2$patient==patient),]

p0=ggplot(a, aes(x = meta_program, y = Score)) +  # ggplot function
  geom_boxplot(aes(fill=site),outlier.shape = NA)+theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
        axis.title.x = element_blank(),
        strip.placement = "outside",
        strip.text.x = element_text(angle=0))
p1 = p0 + scale_y_continuous(limits = quantile(a$Score, c(0.1, 0.9)))+coord_cartesian(ylim = quantile(a$Score, c(0.1, 0.9)))

if(length(table(a$site))==2 && as.numeric(table(a$site)[2])>50 && as.numeric(table(a$site)[1])>50){
stat.test <-compare_means(
  Score ~ site, data = a, group.by = "meta_program",
  method = "t.test", ref.group = "ADNEXA")

p1=p1 + stat_pvalue_manual(
  stat.test, x = "meta_program", y.position = as.numeric(quantile(a$Score, c(0.1, 0.9))[2]),
  label = "p.signif",size = 3.5,color = "red",tip.length = 10,
  bracket.shorten = 10,hide.ns = TRUE)+ggtitle(paste0("Patient: ",patient))
print(p1)
}
else{
  p1=p1+ggtitle(paste0("Patient: ",patient))
  print(p1)
}

}

dev.off()

```

```{r}
Data2<-Data[which(Data$site %in% c("BOWEL","ADNEXA")),]
data_median=Data2 %>% group_by(sample,meta_program) %>% summarise(Score = median(Score, na.rm = TRUE))
data_median$site<-0
data_median$site[grep("BOWEL",data_median$sample)]<-"BOWEL"
data_median$site[grep("ADNEXA",data_median$sample)]<-"ADNEXA"


p0=ggplot(data_median, aes(x = meta_program, y = Score)) +  # ggplot function
  geom_boxplot(aes(fill=site),outlier.shape = NA,position = position_dodge(width = 0.8),width=0.6)+theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
        axis.title.x = element_blank(),
        strip.placement = "outside",
        strip.text.x = element_text(angle=0))

# scale y limits based on ylim1
p0
p1 = p0 + scale_y_continuous(limits = quantile(data_median$Score, c(0.1, 0.9)))+coord_cartesian(ylim = quantile(data_median$Score, c(0.1, 0.9)))+ggtitle("Score: Median_Score_Over_Samples")

p1


pdf("/work/shah/users/Mobina/Projects/SPECTRUM_NACT/Spectrum_Full/meta_program_median_over_samples_Adnexa_BOWEL.pdf",width = 20,height = 10)
p1 
dev.off()


```


```{r}
Data2<-Data[which(Data$site %in% c("OMENTUM","ADNEXA")),]
data_median=Data2 %>% group_by(sample,meta_program) %>% summarise(Score = median(Score, na.rm = TRUE))
data_median$site<-0
data_median$site[grep("OMENTUM",data_median$sample)]<-"OMENTUM"
data_median$site[grep("ADNEXA",data_median$sample)]<-"ADNEXA"


p0=ggplot(data_median, aes(x = meta_program, y = Score)) +  # ggplot function
  geom_boxplot(aes(fill=site),outlier.shape = NA,position = position_dodge(width = 0.8),width=0.6)+theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
        axis.title.x = element_blank(),
        strip.placement = "outside",
        strip.text.x = element_text(angle=0))

# scale y limits based on ylim1
p0
p1 = p0 + scale_y_continuous(limits = quantile(data_median$Score, c(0.1, 0.9)))+coord_cartesian(ylim = quantile(data_median$Score, c(0.1, 0.9)))+ggtitle("Score: Median_Score_Over_Samples")

p1


pdf("/work/shah/users/Mobina/Projects/SPECTRUM_NACT/Spectrum_Full/meta_program_median_over_samples_Adnexa_OMENTUM.pdf",width = 20,height = 10)
p1 
dev.off()
```

